/**
 *
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。
 * 你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。
 */

// 示例 1：

// 输入： 2
// 输出： 2
// 解释： 有两种方法可以爬到楼顶。
// 1.  1 阶 + 1 阶
// 2.  2 阶
// 示例 2：

// 输入： 3
// 输出： 3
// 解释： 有三种方法可以爬到楼顶。
// 1.  1 阶 + 1 阶 + 1 阶
// 2.  1 阶 + 2 阶
// 3.  2 阶 + 1 阶

/**
 * @param {number} n
 * @return {number}
 */
var climbStairs = (n) => {
  const dp = new Array(n + 1).fill(0); // 构建dp数组 长度为n+1
  dp[0] = 1; // 爬0阶楼梯的方式只有1种
  dp[1] = 1; // 爬1级楼梯的方式只有1种
  for (let i = 2; i < dp.length; i++) {
    // 遍历 进行填表
    dp[i] = dp[i - 2] + dp[i - 1]; // 状态转移方程
  }
  return dp[n]; // 返回 爬n阶楼梯的方式数
};
